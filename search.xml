<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[快乐的Linux命令行]]></title>
    <url>%2F2018%2F11%2F30%2F%E5%BF%AB%E4%B9%90%E7%9A%84Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[####一些我新学的知识点梳理 ln 创建硬链接和符号链接 硬链接 1ln file link 当一个硬链接被删除时，这个链接被删除，但是文 件本身的内容仍然存在(这是说，它所占的磁盘空间不会被重新分配)，直到所有关联这个文件的链接都删除掉 。 符号链接 1ln -s item link 一个符号链接指向一个文件，而且这个符号链接本身与其它的符号链接几乎没有区别。例如，如果你往一个符号链接里面写入东西，那么相关联的文件也被写入。然而，当你删除一个符号链接时，只有这个链接被删除，而不是文件自身。 存在原因： 建立符号链接的目的是为了克服硬链接的两个缺点:硬链接不能跨越物理设备，硬链接不能关联目录，只能是文件。 文件之间的拷贝 如果当下在file文件夹下，有文件夹dir1和dir2 ，拷贝dir1整个文件夹到dir2下。 在dir2下可以用。这个会把dir1的文件夹及内容复制过去。 cp -r ../dir1 . 别名 12alias foo='XX'unlias foo 注意：等号两侧不要有空格。 在命令行中定义别名有点儿小问题。当你的 shell 会话结束时，它们会消失。 谨慎使用的好习惯： 1.删除文件时：用ls测试通配符所匹配的内容，确认无误后，再改为rm来删除。 重定向 12345重定向,如果没有命令在它之前，会让我们重定向的文件变为空。&gt;追加方式的重定向&gt;&gt; 前三个看作标准输入，输出和错误，shell 内部参考它们为文件描述符 0，1 和 2。 然后重定向文件描述符 2(标准错误)到文件描述符 1(标准输出)使用表示法 2&gt;&amp;1。 标准错误的重定向必须总是出现在标准输出重定向之后，要不然它不起作用。 1&gt;ls-output.txt 2&gt;&amp;1 统计行数信息 wc(字计数)命令是用来显示文件所包含的行，字和字节数 快速创建一系列文件 最普遍的应用是，创建一系列的文件或目录列表 1mkdir &#123;2007..2009&#125;-0&#123;1..9&#125; &#123;2007..2009&#125;-&#123;10..12&#125; 展开模式 命令替换允许我们把一个命令的输出作为一个展开模式来使用: 12[me@linuxbox ~]$ file $(ls /usr/bin/* | grep zip)/usr/bin/bunzip2: symbolic link to `bzip2' 也可以，使用倒引号来代替美元符号和括号. 引用 shell 提供了一种叫做引用的机制，来有选择地禁止不需要的展开。 1记住，在双引号中，参数展开，算术表达式展开，和命令替换仍然有效 如果需要禁止所有的展开，我们使用单引号。 12345678[me@linuxbox ~]$ echo text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USERtext /home/me/ls-output.txt a b foo 4 me[me@linuxbox ~]$ echo "text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER"text ~/*.txt &#123;a,b&#125; foo 4 me[me@linuxbox ~]$ echo 'text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER'text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER 正如我们所看到的，随着引用程度加强，越来越多的展开被禁止。 转义字符 1经常在双引号中使用转义字符，来有选择地阻止展开。 命令行 1234比方说在我们的搜索结果之中，我们得到一行，包含了有趣的命令，像这样88 ls -l /usr/bin &gt; ls-output.txt 数字 “88” 是这个命令在历史列表中的行号。随后在使用另一种展开类型时，叫做历史命令 展开，我们会用到这个数字。我们可以这样做，来使用我们所发现的行: 1[me@linuxbox ~]$ !88 权限 1234567• id –显示用户身份号• chmod –更改文件模式• umask –设置默认的文件权限• su –以另一个用户的身份来运行 shell• sudo –以另一个用户的身份来执行命令• chown –更改文件所有者• chgrp –更改文件组所有权 更改模式 剩下的九个字符，叫做文件模式，代表着文件所有者，文件组所有者，和其他人的读，写， 执行权限。 当设置文件模式后，r，w，x 模式属性。 八进制表示法 通过使用 3 个八进制数字，我们能够设置文件所有者，用户组，和其他人的权限. 虽然八进制到二进制的映射看起来不方便，但通常只会用到一些常见的映射关系:7 (rwx)，6 (rw-)，5 (r-x)，4 (r–)，and 0 (-–)。 符号表示法 权限由“r”, “w”, and “x”来指定。 如果没有指定字符，则假定使用“all”。执行的操作可能是一个“+”字符，表示加上一个 权限，一个“-”，表示删掉一个权限，或者是一个“=”，表示只有指定的权限可用，其它所 有的权限被删除。 符号表示法的优点是，允许你设置文件模式的单个组成部分的属性，而没有影响其他的部分。 umask 当创建一个文件时，umask 命令控制着文件的默认权限。 注意掩码中若出现一个数字 1， 则删除文件模式中和这个 1 在相同位置的属性，在这是指其他人的写权限 su 如果包含 “-l” 选项，那么会为指定用户启动一个需要登录的 shell。这意味着会加载此用户的 shell 环境，并且工作目录会更改到这个用户的主目录。 如果不指定用户，那么就假定是超级用户。注意(不可思议地)，选项 “-l” 可以缩写为”-”，这是经常用到的形式。 sudo su 和 sudo 之间的一个重要区别是 sudo 不会重新启动一个 shell，也不会加载另一个用户的 shell 运行环境。这意味者命令不必用单引号引起来。 chown 命令只能更改文件所有权，而不是用户组所有权。 chgrp -更改用户组所有权 进程是怎么工作的 当系统启动的时候，内核先把一些它自己的程序初始化为进程，然后运行一个叫做 init 的程序。init，依次地，再运行一系列的称为 init 脚本的 shell 脚本(位于/etc)，它们可以启动所有的系统服务。其中许多系统服务以守护(daemon)程序的形式实现，守护程序仅在后台运行，没有任何用户接口。这样，即使我们没有登录系统，至少系统也在忙于执行一些例行事务。 内核的作用之一 内核维护每个进程的信息，以此来保持事情有序。例如，系统分配给每个进程一个数字，这个数字叫做进程 ID 或 PID。PID 号按升序分配，init 进程的 PID 总是 1。内核也对分配给每个进程的内存进行跟踪。 启动一个程序，让它立即在后台运行，我们在程序命令之后，加上 “&amp;” 字符 使用 fg命令，让一个进程返回前台执行 12345[me@linuxbox ~]$ jobs[1]+ Running xlogo &amp;[me@linuxbox ~]$ fg %1xlogo fg 命令之后，跟随着一个百分号和工作序号(叫做 jobspec)。 shell环境 123• printenv –打印部分或所有的环境变量• set –设置 shell 选项• export —导出环境变量，让随后执行的程序知道。 • alias –创建命令别名 vim命令重温 yy p]]></content>
  </entry>
  <entry>
    <title><![CDATA[快乐的Linux命令行(下)]]></title>
    <url>%2F2018%2F11%2F30%2F%E5%BF%AB%E4%B9%90%E7%9A%84Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E4%B8%8B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[查找 ###locate locate 数据库由另一个叫做 updatedb 的程序创建。通常，这个程序作为一个 cron 工作例程周期性运转;也就是说，一个任务在特定的时间间隔内被 cron 守护进程执行。大多数装有 locate的系统会每隔一天运行一回 updatedb 程序。因为数据库不能被持续地更新，所以当使用 locate 时，你会发现目前最新的文件不会出现。为了克服这个问题，有可能手动运行 updatedb 程序，更改为超级用户身份，在提示符下运行 updatedb 命令。 1locate zip | grep bin findlocate 程序只能依据文件名来查找文件，而 find 程序能基于各种各样的属性，搜索一个给定目录(以及它的子目录)，来查找文件。 用户定义的行为 除了预定义的行为之外，我们也可以唤醒随意的命令。传统方式是通过 -exec 行为。 重述一遍，因为花括号和分号对于 shell 有特殊含义，所以它们必须被引起来或被转义。 stat 我们能够验证它通过使用另一个方便的命令，stat，是一款加大马力的 ls 命令版本。这个 stat 命令会展示系统对某个文件及其属性所知道的所有信息 创建文件夹，包含多个子目录和文件 只用这两行，我们就创建了一个包含一百个子目录，每个子目录中包含了 26 个空文件的操练场。 12[me@linuxbox ~]$ mkdir -p playground/dir-&#123;00&#123;1..9&#125;,0&#123;10..99&#125;,100&#125;[me@linuxbox ~]$ touch playground/dir-&#123;00&#123;1..9&#125;,0&#123;10..99&#125;,100&#125;/file-&#123;A..Z&#125; 归档和备份 gzip 程序被用来压缩一个或多个文件。当执行 gzip 命令时，则原始文件的压缩版会替代原始文件。相对应的 gunzip 程序被用来把压缩文件复原为没有被压缩的版本。]]></content>
  </entry>
  <entry>
    <title><![CDATA[最大公约数gcd]]></title>
    <url>%2F2018%2F11%2F30%2F%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0gcd%2F</url>
    <content type="text"><![CDATA[百度百科写的是 12345678910111213#include&lt;stdio.h&gt;//non-recursionunsigned int gcd(unsigned int a,unsigned int b)&#123; int r; while(b&gt;0) &#123; r=a%b; a=b; b=r; &#125; return a;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[一些网络文章资源]]></title>
    <url>%2F2018%2F11%2F30%2F%E4%B8%80%E4%BA%9B%E7%BD%91%E7%BB%9C%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[机器之心让你事半功倍的小众Python库 原文链接： https://medium.com/analytics-vidhya/python-libraries-for-data-science-other-than-pandas-and-numpy-95da30568fad]]></content>
  </entry>
  <entry>
    <title><![CDATA[入职前计划]]></title>
    <url>%2F2018%2F11%2F30%2F%E5%85%A5%E8%81%8C%E5%89%8D%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[入职前计划1.看30本书。 2.刷完LeetCode的easy和medium难度题。 3.参加一个比赛。 11.18号 今天计划： 1.搭建个人博客 2.大概写个《入职计划安排》雏形 3.收拾东西，明天回学校 书单要包含： 1.大数据相关书籍2+ 2.shell脚本书籍1+ 3.Linux命令书籍1+ 4.Python核心编程强化2+ 5.NLP相关书籍5+ 6.推荐系统2+ 7.风险控制2+ 可能要用到的： SQL，spark，Scala。 要再次重新去扩充熟悉的库： pandas、sklearn。 书单： 快乐的Linux命令行 Linux命令行与shell脚本编程大全]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo初次搭建blog]]></title>
    <url>%2F2018%2F11%2F18%2Fhexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BAblog%2F</url>
    <content type="text"><![CDATA[第一篇博客###使用到的教程： 1.hexo+github搭建个人博客 http://fangzh.top/2018/2018090514/ 2.hexo搭建博客后，hexo博客的使用方法 https://blog.csdn.net/wsmrzx/article/details/81478945]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F11%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
